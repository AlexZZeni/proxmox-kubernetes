---
- name: Get architecture
  ansible.builtin.command:
    cmd: dpkg --print-architecture
  register: os_architecture

- name: Get OS release
  ansible.builtin.shell:
    cmd: . /etc/os-release && echo "$VERSION_CODENAME"
  register: os_release

- name: Get OS Type
  ansible.builtin.shell:
    cmd: . /etc/os-release && echo "$ID"
  register: os_type

- name: Uninstall Docker old versions
  ansible.builtin.apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
  notify:
    - Refresh APT cache

- name: Install Containerd dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - gnupg
      - software-properties-common

- name: Install keyrings
  ansible.builtin.command: install -m 0755 -d /etc/apt/keyrings

- name: Check if the repository list exists
  ansible.builtin.stat:
    path: /etc/apt/sources.list.d/containerd.list.list
  register: repo_stat

- name: Add Docker official GPG key
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  when: not repo_stat.stat.exists

- name: Set up Docker APT repository
  ansible.builtin.apt_repository:
    repo: >
      deb [arch={{ os_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/{{ os_type.stdout }} {{ os_release.stdout }} stable
    filename: containerd.list
  when: not repo_stat.stat.exists

- name: Install Containerd engine
  ansible.builtin.apt:
    name:
      - containerd.io

- name: Create modules file for containerd
  ansible.builtin.file:
    path: /etc/modules-load.d/containerd.conf
    state: touch
    owner: root
    group: root
    mode: "0644" # Read/write for owner, read-only for others

- name: Load the necessary modules for Containerd 1
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/containerd.conf
    line: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: Load the necessary modules for Containerd 2
  ansible.builtin.command:
    cmd: modprobe {{ item }}
  with_items:
    - overlay
    - br_netfilter

- name: Create containerd directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    owner: root
    group: root
    mode: "0644" # Read/write for owner, read-only for others

- name: Generate containerd configuration
  ansible.builtin.command:
    cmd: containerd config default
  register: containerd_config

- name: Delete old containerd configuration
  ansible.builtin.file:
    path: /etc/containerd/config.toml
    state: absent

- name: Create containerd configuration file
  ansible.builtin.file:
    path: /etc/containerd/config.toml
    state: touch
    owner: root
    group: root
    mode: "0644" # Read/write for owner, read-only for others

- name: Paste generated containerd configuration into file
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    line: "{{ containerd_config.stdout }}"

- name: DEBUG generated containerd configuration
  ansible.builtin.debug:
    msg: "{{ containerd_config.stdout }}"
  when: debug

- name: Replace sandbox_image with the correct version in containerd configuration
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: '    sandbox_image = "registry.k8s.io/pause:3.8"'
    replace: '    sandbox_image = "registry.k8s.io/pause:3.10"'
  notify:
    - Restart Containerd

- name: Change SystemdCgroup configuration in containerd
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: "            SystemdCgroup = false"
    replace: "            SystemdCgroup = true"
  notify:
    - Restart Containerd

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
